#include"AES.h"

byte S_Box[16][16] = {
	{0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76},
	{0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0},
	{0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15},
	{0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75},
	{0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84},
	{0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF},
	{0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8},
	{0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2},
	{0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73},
	{0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB},
	{0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79},
	{0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08},
	{0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A},
	{0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E},
	{0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF},
	{0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16}
};


byte Inv_S_Box[16][16] = {
	{0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB},
	{0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB},
	{0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E},
	{0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25},
	{0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92},
	{0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84},
	{0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06},
	{0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B},
	{0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73},
	{0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E},
	{0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B},
	{0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4},
	{0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F},
	{0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF},
	{0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61},
	{0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D}
};

void  StrToByte(string a, byte b[], int n)
{
	for (int j = 0; j < n; ++j)
	{
		b[j] = a[j];
	}
}

void show_byte(byte a[], int n)
{
	char s[16] = { '0','1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };
	for (int i = 0; i < n * 2; i++)
	{
		if (i % 2 == 0)
		{
			int temp = unsigned int(a[i / 2]) >> 4;
			cout << s[temp];
		}
		else
		{
			int temp = unsigned int(a[i / 2]) % 16;
			cout << s[temp];
		}
	}
	cout << endl;
}

void copy_bit_32(bitset<32>a, bitset<32>b)
{
	for (int i = 0; i < 32; i++)
		a[i] = b[i];
}

bitset<32> left_move_8_32(bitset<32> in)
{
	bitset<32> res;
	for (int i = 0; i < 32; i++)
	{
		res[i] = in[(i + 8) % 32];
	}
	return res;
}


byte AES::S_change(byte in, bool is_encry)
{
	byte res;
	int row, col;
	row = int(in) / 16;
	col = int(in) % 16;
	if (is_encry)
		res = S_Box[row][col];
	else
		res = Inv_S_Box[row][col];
	return res;
}

void AES::get_txt(byte in[16])
{
	for (int i = 0; i < 16; i++)
		txt[i] = in[i];
}

void AES::get_key(byte in[16])
{
	//cout << "ÃÜÔ¿£º" << endl;
	for (int i = 0; i < 16; i++)
		or_key[i] = in[i];

	for (int j = 0; j < 4; j++)
	{
		for (int k = 0; k < 4; k++)
		{
			w[0][j][k] = or_key[j * 4 + k];
		}
	}
	byte b[10] = { 0x01,0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36 };
	for (int i = 1; i < 11; i++)
	{
		for (int j = 0; j < 4; j++)
		{
			if (j % 4 == 0)
			{
				byte temp[4];
				//×óÒÆ
				for (int p = 0; p < 4; p++)
					temp[p] = w[(i * 4 + j - 1) / 4][(p + 1) % 4][(i * 4 + j - 1) % 4];
				//show_byte(temp, 4);
				//SºÐÌæ»»
				for (int k = 0; k < 4; k++)
				{
					temp[k] = S_change(temp[k], 1);
				}
				//show_byte(temp, 4);			
				//Òì»ò
				for (int h = 0; h < 4; h++)
				{
					if (h == 0)
					{
						temp[h] = temp[h] ^ w[(i * 4 + j - 4) / 4][h][(i * 4 + j - 4) % 4] ^ b[i - 1];
					}
					else
						temp[h] = temp[h] ^ w[(i * 4 + j - 4) / 4][h][(i * 4 + j - 4) % 4];
				}
				//show_byte(temp, 4);

				//¸³Öµ
				for (int t = 0; t < 4; t++)
				{
					w[i][t][j] = temp[t];
				}
				//show_byte(temp, 4);
			}
			else
			{
				for (int t = 0; t < 4; t++)
				{
					w[i][t][j] = w[(i * 4 + j - 4) / 4][t][(i * 4 + j - 4) % 4] ^ w[(i * 4 + j - 1) / 4][t][(i * 4 + j - 1) % 4];
				}
			}
		}
	}
	for (int i = 0; i < 11; i++)
	{
		//cout << "w" << i << endl;
		//for (int q = 0; q < 4; q++)
			//show_byte(w[i][q], 4);
		//cout << endl;
	}
}

void AES::AddRoundKey(byte in[16], byte out[16], int w_n)
{
	for (int i = 0; i < 16; i++)
	{
		out[i] = in[i] ^ w[w_n][i / 4][i % 4];
	}
}

void AES::SubBytes(byte in[16], byte out[16])
{
	for (int i = 0; i < 16; i++)
	{
		out[i] = S_change(in[i], 1);
	}
}

void AES::ShiftRows(byte in[16], byte out[16])
{
	byte temp[16];
	for (int i = 0; i < 16; i++)
	{
		temp[i] = in[i];
	}
	for (int i = 0; i < 4; i++)
	{
		for (int j = 0; j < 4; j++)
		{
			out[i * 4 + j] = temp[i * 4 + ((j + i) % 4)];
		}
	}
}

byte AES::GFMul(byte a, byte b) {
	byte p = 0;
	byte h;
	while (b != 0) {
		if ((b & byte(1)) != 0) {
			p ^= a;
		}
		h = (byte)(a & byte(0x80));
		a <<= 1;
		if (h != 0) {
			a ^= 0x1b;
		}
		b >>= 1;
	}
	return p;
}

void AES::MixColumns(byte in[16], byte out[16])
{
	byte t[4][4];
	for (int i = 0; i < 4; i++)
	{
		for (int j = 0; j < 4; j++)
		{
			t[i][j] = in[i * 4 + j];
		}
	}
	byte ta[4][4];
	byte change[4][4] = { {0x02,0x03,0x01,0x01 },{0x01,0x02,0x03,0x01 },{0x01,0x01,0x02,0x03 },{0x03,0x01,0x01,0x02 } };
	for (int k = 0; k < 4; k++)
	{
		for (int i = 0; i < 4; i++)
		{
			byte sum = 0;
			byte temp = 0;
			for (int j = 0; j < 4; j++)
			{
				temp = GFMul(t[j][k], change[i][j]);
				sum = sum ^ temp;
			}
			ta[i][k] = sum;
		}
	}
	for (int i = 0; i < 4; i++)
	{
		for (int j = 0; j < 4; j++)
		{
			out[i * 4 + j] = ta[i][j];
		}
	}
}

void AES::once(byte in[16], byte out[16], int w_n)
{
	byte Sub_res[16], Shift_res[16], Mix_res[16];
	SubBytes(in, Sub_res);

	ShiftRows(Sub_res, Shift_res);

	MixColumns(Shift_res, Mix_res);

	AddRoundKey(Mix_res, out, w_n);
}

void AES::aes(byte in[16], byte key[16], byte out[16])
{
	get_txt(in);
	get_key(key);
	byte temp[16], temp_in[16], temp_out[16];
	AddRoundKey(txt, temp, 0);
	for (int i = 1; i <= 9; i++)
	{
		once(temp, temp, i);
	}
	byte Sub_res[16], Shift_res[16];
	SubBytes(temp, Sub_res);

	ShiftRows(Sub_res, Shift_res);

	AddRoundKey(Shift_res, out, 10);
}

void AES::InvShiftRows(byte in[16], byte out[16])
{
	byte temp[16];
	for (int i = 0; i < 16; i++)
	{
		temp[i] = in[i];
	}
	for (int i = 0; i < 4; i++)
	{
		for (int j = 0; j < 4; j++)
		{
			out[i * 4 + j] = temp[i * 4 + ((j - i + 4) % 4)];
		}
	}
}

void AES::InvSubBytes(byte in[16], byte out[16])
{
	for (int i = 0; i < 16; i++)
	{
		out[i] = S_change(in[i], 0);
	}
}

void AES::InvMixColumns(byte in[16], byte out[16])
{
	byte t[4][4];
	for (int i = 0; i < 4; i++)
	{
		for (int j = 0; j < 4; j++)
		{
			t[i][j] = in[i * 4 + j];
		}
	}
	byte ta[4][4];
	byte change[4][4] = { {0x0e,0x0b,0x0d,0x09 },{0x09,0x0e,0x0b,0x0d },{0x0d,0x09,0x0e,0x0b },{0x0b,0x0d,0x09,0x0e } };
	for (int k = 0; k < 4; k++)
	{
		for (int i = 0; i < 4; i++)
		{
			byte sum = 0;
			byte temp = 0;
			for (int j = 0; j < 4; j++)
			{
				temp = GFMul(t[j][k], change[i][j]);
				sum = sum ^ temp;
			}
			ta[i][k] = sum;
		}
	}
	for (int i = 0; i < 4; i++)
	{
		for (int j = 0; j < 4; j++)
		{
			out[i * 4 + j] = ta[i][j];
		}
	}
}

void AES::decode_once(byte in[16], byte out[16], int w_n)
{
	byte Sub_res[16], Shift_res[16], Add_res[16];
	InvShiftRows(in, Shift_res);

	InvSubBytes(Shift_res, Sub_res);

	AddRoundKey(Sub_res, Add_res, w_n);

	InvMixColumns(Add_res, out);
}

void AES::aes_decode(byte in[16], byte key[16], byte out[16])
{
	get_txt(in);
	get_key(key);
	byte temp[16], temp_in[16], temp_out[16];
	AddRoundKey(txt, temp, 10);
	for (int i = 9; i >= 1; i--)
	{
		decode_once(temp, temp, i);
	}
	byte Sub_res[16], Shift_res[16];
	InvShiftRows(temp, Shift_res);

	InvSubBytes(Shift_res, Sub_res);

	AddRoundKey(Sub_res, out, 0);
}
/*
int aes_test()
{
	byte a[16] = { 0x19,0xa0,0x9a,0xe9,0x3d,0xf4,0xc6,0xf8,0xe3,0xe2,0x8d,0x48,0xbe,0x2b,0x2a,0x08 };
	byte b[16] = { 0x2b,0x28,0xab,0x09,0x7e,0xae,0xf7,0xcf,0x15,0xd2,0x15,0x4f,0x16,0xa6,0x88,0x3c };
	byte txt[16];
	byte d[16];
	//cout << "Ô­ÎÄ£º" << endl;
	for (int i = 0; i < 16; i++)
		txt[i] = a[i] ^ b[i];
	byte c[16];
	//show_byte(txt, 16);
	AES aes;
	aes.aes(txt, b, c);
	aes.aes_decode(c, b, d);
	return 0;
	/*
	aes.SubBytes(a, b);
	show_byte(b,16);
	aes.ShiftRows(b, b);
	show_byte(b, 16);
	aes.MixColumns(b, b);
	show_byte(b, 16);
	//for(int i=0;i<4;i++)
		//show_byte(aes.w[1][i],4);*
}

*/